#pragma once

// generated by /usr/local/bin/sqlpp11-ddl2cpp server/schema.sql src/ddl_defs db

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace db
{
  namespace Urls_
  {
    struct HashStr
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "hashStr";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hashStr;
            T& operator()() { return hashStr; }
            const T& operator()() const { return hashStr; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Url
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "url";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T url;
            T& operator()() { return url; }
            const T& operator()() const { return url; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace Urls_

  struct Urls: sqlpp::table_t<Urls,
               Urls_::HashStr,
               Urls_::Url>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "urls";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T urls;
        T& operator()() { return urls; }
        const T& operator()() const { return urls; }
      };
    };
  };
} // namespace db
